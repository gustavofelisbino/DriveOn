import * as React from 'react';import {  Dialog, DialogTitle, DialogContent, DialogActions,  Button, TextField, Stack} from '@mui/material';import { Controller, useForm } from 'react-hook-form';import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';import dayjs, { Dayjs } from 'dayjs';import 'dayjs/locale/pt-br';export type TaskForm = {  title: string;  dateTime: Dayjs | null;  description?: string;};type Props = {  open: boolean;  onClose: () => void;  onCreate: (data: TaskForm) => void;  defaultDate?: Dayjs | null;};export default function DialogAgendamento({  open, onClose, onCreate, defaultDate}: Props) {  const {    control,    handleSubmit,    reset,    formState: { errors, isValid, isSubmitting }  } = useForm<TaskForm>({    mode: 'onChange',    defaultValues: {      title: '',      dateTime: defaultDate ?? dayjs(),      description: '',    }  });  React.useEffect(() => {    if (open) {      reset({        title: '',        description: '',        dateTime: (defaultDate ?? dayjs()).second(0),      });    }  }, [open, defaultDate, reset]);  const onSubmit = (data: TaskForm) => {    onCreate(data);    reset();    onClose();  };  const handleClose = () => {    reset();    onClose();  };  return (    <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale="pt-br">      <Dialog open={open} onClose={handleClose} fullWidth maxWidth="sm">        <DialogTitle>Nova tarefa</DialogTitle>        <DialogContent dividers>          <Stack spacing={2} mt={0.5}>            <Controller              name="title"              control={control}              rules={{                required: 'Informe um título',                maxLength: { value: 100, message: 'Máx. 100 caracteres' },              }}              render={({ field }) => (                <TextField                  {...field}                  label="Título"                  placeholder="Ex.: Troca de vela - Civic 2009"                  autoFocus                  error={!!errors.title}                  helperText={errors.title?.message}                  fullWidth                />              )}            />            <Controller              name="dateTime"              control={control}              rules={{ required: 'Escolha data e hora' }}              render={({ field }) => (                <DateTimePicker                  label="Data e hora"                  ampm={false}                  value={field.value}                  onChange={(newVal) => field.onChange(newVal)}                  slotProps={{                    textField: {                      error: !!errors.dateTime,                      helperText: errors.dateTime?.message,                      fullWidth: true,                    },                    popper: { placement: 'bottom-start' },                  }}                />              )}            />            <Controller              name="description"              control={control}              rules={{ maxLength: { value: 500, message: 'Máx. 500 caracteres' } }}              render={({ field }) => (                <TextField                  {...field}                  label="Descrição (opcional)"                  placeholder="Detalhes, observações..."                  multiline                  minRows={3}                  error={!!errors.description}                  helperText={errors.description?.message}                  fullWidth                />              )}            />          </Stack>        </DialogContent>        <DialogActions sx={{ px: 3, py: 2 }}>          <Button onClick={handleClose}>Cancelar</Button>          <Button            onClick={handleSubmit(onSubmit)}            variant="contained"            disabled={!isValid || isSubmitting}          >            Salvar          </Button>        </DialogActions>      </Dialog>    </LocalizationProvider>  );}