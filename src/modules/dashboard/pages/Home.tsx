import * as React from 'react';import {  Box,  Paper,  Stack,  Typography,  Button,  IconButton,  Divider,} from '@mui/material';import { alpha } from '@mui/material/styles';import AddRoundedIcon from '@mui/icons-material/AddRounded';import AssignmentRoundedIcon from '@mui/icons-material/AssignmentRounded';import DirectionsCarRoundedIcon from '@mui/icons-material/DirectionsCarRounded';import MoreHorizRoundedIcon from '@mui/icons-material/MoreHorizRounded';import CircleIcon from '@mui/icons-material/Circle';import PersonOutlineIcon from '@mui/icons-material/PersonOutline';import DialogCarro, { type CarForm } from '../dialog/carro';import DialogAgendamento, { type TaskForm } from '../dialog/agendamento';const initialTasks = [  { title: 'Troca de vela - Civic 2009', date: '19/07/2025 às 13:10' },  { title: 'Amortecedor traseiro - Civic 2009', date: '03/07/2025 às 10:45' },  { title: 'Revisão geral - Peugeot 208 2014', date: '02/07/2025 às 17:00' },];const initialCars = [  'Chevrolet Astra - 2003',  'Mitsubishi ASX - 2015',  'Peugeot 208 - 2014',];const initialClients = [  'Gustavo',  'Maria',  'Pedro',];function SoftButton(props: React.ComponentProps<typeof Button>) {  const { sx, ...rest } = props;  return (    <Button      variant="text"      {...rest}      sx={{        borderRadius: 999,        px: 1.5,        py: 0.5,        bgcolor: (t) => alpha(t.palette.primary.main, 0.08),        color: 'primary.main',        fontWeight: 600,        textTransform: 'none',        '&:hover': {          bgcolor: (t) => alpha(t.palette.primary.main, 0.15),        },        ...sx,      }}    />  );}function StatusDot({ color = 'warning.main', label = 'pendente' }) {  return (    <Stack direction="row" spacing={0.75} alignItems="center">      <CircleIcon sx={{ fontSize: 7, color }} />      <Typography variant="caption" color="text.secondary">        {label}      </Typography>    </Stack>  );}function SectionCard({  title,  icon,  count,  action,  children,}: {  title: string;  icon: React.ReactNode;  count?: number;  action?: React.ReactNode;  children: React.ReactNode;}) {  return (    <Paper      elevation={0}      sx={{        p: 3,        borderRadius: 3,        border: (t) => `1px solid ${alpha(t.palette.divider, 0.6)}`,        bgcolor: 'background.paper',      }}    >      <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ mb: 2 }}>        <Stack direction="row" spacing={1.25} alignItems="center">          <Box            sx={{              width: 28,              height: 28,              borderRadius: '50%',              display: 'grid',              placeItems: 'center',              bgcolor: (t) => t.palette.action.hover,              color: 'text.primary',              flexShrink: 0,            }}          >            {icon}          </Box>          <Stack spacing={0.2}>            <Typography variant="subtitle2" fontWeight={700}>              {title}            </Typography>            {!!count && (              <Typography variant="caption" color="text.secondary">                {count} {count === 1 ? 'item' : 'itens'}              </Typography>            )}          </Stack>        </Stack>        {action}      </Stack>      {children}    </Paper>  );}function ListRow({  title,  subtitle,  trailing,}: {  title: string;  subtitle?: string;  trailing?: React.ReactNode;}) {  return (    <Stack      direction="row"      alignItems="center"      justifyContent="space-between"      sx={{        py: 1,        px: 0.5,      }}    >      <Box sx={{ flex: 1, minWidth: 0 }}>        <Typography variant="body2" fontWeight={600} noWrap>          {title}        </Typography>        {subtitle && (          <Typography            variant="body2"            color="text.secondary"            sx={{ fontSize: 13, lineHeight: 1.6 }}            noWrap          >            {subtitle}          </Typography>        )}      </Box>      {trailing}    </Stack>  );}export default function Home() {  const [tasks, setTasks] = React.useState(initialTasks);  const [cars, setCars] = React.useState(initialCars);  const [clients, setClients] = React.useState(initialClients);  const [openTask, setOpenTask] = React.useState(false);  const [openCar, setOpenCar] = React.useState(false);  const [openClient, setOpenClient] = React.useState(false);  const handleCreateTask = (data: TaskForm) => {    const newTask = {      title: data.title,      date: data.dateTime ? data.dateTime.format('DD/MM/YYYY [às] HH:mm') : '',    };    setTasks((prev) => [newTask, ...prev]);  };  const handleCreateCar = (data: CarForm) => {    const newCar = `${data.brand} ${data.model} - ${data.year}`;    setCars((prev) => [newCar, ...prev]);  };  const handleCreateClient = (data: ClientForm) => {    const newClient = `${data.name} ${data.lastName}`;    setClients((prev) => [newClient, ...prev]);  };  const visibleTasks = tasks.slice(0, 5);  const visibleCars = cars.slice(0, 5);  const visibleClients = clients.slice(0, 5);  return (    <Box      sx={{        maxWidth: 1600,        mx: 'auto',        px: { xs: 2, md: 4, lg: 6 },        py: { xs: 2, md: 4 },      }}    >      <Stack direction="row" alignItems="center" justifyContent="space-between" mb={3}>        <Stack spacing={0.3} mt={2}>          <Typography variant="h6" fontWeight={600}>            Início          </Typography>          <Typography variant="body2" color="text.secondary" sx={{ lineHeight: 1.6 }}>            Resumo rápido do seu dia na oficina          </Typography>        </Stack>        <IconButton>          <MoreHorizRoundedIcon />        </IconButton>      </Stack>      <Stack      direction={{ xs: 'column', md: 'row' }}      spacing={3}      sx={{ alignItems: 'stretch' }}      >        <SectionCard          title="Atividades pendentes"          icon={<AssignmentRoundedIcon />}          count={tasks.length}          action={            <SoftButton            onClick={() => setOpenTask(true)}            startIcon={<AddRoundedIcon />}            sx={{ml: 8}}>              Adicionar            </SoftButton>          }        >          <Stack divider={<Divider sx={{ borderColor: (t) => alpha(t.palette.divider, 0.4) }} />} spacing={2}>            {tasks.length === 0 && (              <EmptyState                icon={<AssignmentRoundedIcon color="disabled" />}                text="Nenhuma tarefa por aqui"                hint="Clique em “Adicionar” para começar"              />            )}            {visibleTasks.map((t, i) => (              <ListRow key={i} title={t.title} subtitle={t.date} trailing={<StatusDot />} />            ))}          </Stack>        </SectionCard>        <SectionCard          title="Carros adicionados"          icon={<DirectionsCarRoundedIcon />}          count={cars.length}          action={            <SoftButton            onClick={() => setOpenCar(true)}            startIcon={<AddRoundedIcon />}            sx={{ml: 12}}>              Adicionar            </SoftButton>          }        >          <Stack divider={<Divider sx={{ borderColor: (t) => alpha(t.palette.divider, 0.4) }} />} spacing={2}>            {cars.length === 0 && (              <EmptyState                icon={<DirectionsCarRoundedIcon color="disabled" />}                text="Nenhum carro cadastrado"                hint="Use “Adicionar” para registrar um veículo"              />            )}            {visibleCars.map((c, i) => (              <ListRow key={i} title={c} />            ))}          </Stack>        </SectionCard>        <SectionCard          title="Clientes"          icon={<PersonOutlineIcon />}          count={clients.length}          action={            <SoftButton            onClick={() => setOpenClient(true)}            startIcon={<AddRoundedIcon />}            sx={{ml: 12}}>              Adicionar            </SoftButton>          }        >          <Stack divider={<Divider sx={{ borderColor: (t) => alpha(t.palette.divider, 0.4) }} />} spacing={2}>            {clients.length === 0 && (              <EmptyState                icon={<PersonOutlineIcon color="disabled" />}                text="Nenhum cliente cadastrado"                hint="Use “Adicionar” para registrar um cliente"              />            )}            {visibleClients.map((c, i) => (              <ListRow key={i} title={c} />            ))}          </Stack>        </SectionCard>      </Stack>      <DialogAgendamento open={openTask} onClose={() => setOpenTask(false)} onCreate={handleCreateTask} />      <DialogCarro open={openCar} onClose={() => setOpenCar(false)} onCreate={handleCreateCar} />    </Box>  );}function EmptyState({ icon, text, hint }: { icon: React.ReactNode; text: string; hint?: string }) {  return (    <Paper      variant="outlined"      sx={{        borderRadius: 2,        py: 5,        px: 2,        textAlign: 'center',        bgcolor: 'background.default',      }}    >      <Stack spacing={1.2} alignItems="center">        {icon}        <Typography fontWeight={600} variant="body2">          {text}        </Typography>        {hint && (          <Typography variant="caption" color="text.secondary">            {hint}          </Typography>        )}      </Stack>    </Paper>  );}