import * as React from 'react';import {  Dialog,  DialogContent,  DialogActions,  Stack,  TextField,  Button,  IconButton,  Typography,  MenuItem,  InputAdornment,  Paper,} from '@mui/material';import { alpha } from '@mui/material/styles';import CloseRoundedIcon from '@mui/icons-material/CloseRounded';import AddTaskRoundedIcon from '@mui/icons-material/AddTaskRounded';import EditRoundedIcon from '@mui/icons-material/EditRounded';import CalendarMonthRoundedIcon from '@mui/icons-material/CalendarMonthRounded';import NotesRoundedIcon from '@mui/icons-material/NotesRounded';import CircleIcon from '@mui/icons-material/Circle';import dayjs, { Dayjs } from 'dayjs';import 'dayjs/locale/pt-br';import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';export type Task = {  id?: string;  title: string;  date: string;  status?: 'pendente' | 'concluída' | 'atrasada';  notes?: string;};type Props = {  open: boolean;  mode: 'create' | 'edit';  initial?: Task | null;  onClose: () => void;  onSubmit: (task: Task) => void;  onDelete?: (task: Task) => void;};const statusOptions = [  { value: 'pendente', label: 'Pendente', color: 'warning.main' },  { value: 'atrasada', label: 'Atrasada', color: 'error.main' },  { value: 'concluída', label: 'Concluída', color: 'success.main' },] as const;export default function TaskDialog({  open,  mode,  initial,  onClose,  onSubmit,  onDelete,}: Props) {  const [title, setTitle] = React.useState(initial?.title ?? '');  const [dateTime, setDateTime] = React.useState<Dayjs | null>(    initial?.date ? parseDate(initial.date) : dayjs(),  );  const [status, setStatus] = React.useState<Task['status']>(initial?.status ?? 'pendente');  const [notes, setNotes] = React.useState(initial?.notes ?? '');  const [touched, setTouched] = React.useState(false);  React.useEffect(() => {    setTitle(initial?.title ?? '');    setDateTime(initial?.date ? parseDate(initial.date) : dayjs());    setStatus(initial?.status ?? 'pendente');    setNotes(initial?.notes ?? '');    setTouched(false);  }, [initial, open]);  const titleError = touched && !title.trim();  const dateError = touched && !dateTime;  const headerIcon =    mode === 'create' ? <AddTaskRoundedIcon /> : <EditRoundedIcon />;  const handleSubmit = () => {    setTouched(true);    if (!title.trim() || !dateTime) return;    const formatted = dateTime.locale('pt-br').format('DD/MM/YYYY [às] HH:mm');    const payload: Task = {      ...(initial?.id ? { id: initial.id } : {}),      title: title.trim(),      date: formatted,      status,      notes: notes.trim() || undefined,    };    onSubmit(payload);    onClose();  };  const handleDelete = () => {    if (mode === 'edit' && onDelete && initial) {      onDelete(initial);      onClose();    }  };  return (    <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale="pt-br">      <Dialog        open={open}        onClose={onClose}        fullWidth        maxWidth="sm"        PaperProps={{          sx: {            borderRadius: 4,            overflow: 'hidden',          },        }}      >        <Paper          elevation={0}          square          sx={{            px: 3,            py: 2,            display: 'flex',            alignItems: 'center',            justifyContent: 'space-between',            bgcolor: (t) => alpha(t.palette.primary.main, 0.06),          }}        >          <Stack direction="row" spacing={1.5} alignItems="center">            <HeaderIconWrapper>{headerIcon}</HeaderIconWrapper>            <Stack spacing={0}>              <Typography variant="subtitle1" fontWeight={800}>                {mode === 'create' ? 'Cadastrar nova tarefa' : 'Editar tarefa'}              </Typography>              <Typography variant="body2" color="text.secondary">                Preencha os campos abaixo e salve suas alterações              </Typography>            </Stack>          </Stack>          <IconButton onClick={onClose} size="small">            <CloseRoundedIcon />          </IconButton>        </Paper>        <DialogContent sx={{ px: 3, pt: 3, pb: 1 }}>          <Stack spacing={2.25}>            <TextField              label="Título da tarefa"              placeholder="Ex.: Revisão geral - Peugeot 208 2014"              value={title}              onChange={(e) => setTitle(e.target.value)}              error={titleError}              helperText={titleError ? 'Informe um título' : ' '}              fullWidth            />            <DateTimePicker              label="Data e hora"              value={dateTime}              onChange={(v) => setDateTime(v)}              slotProps={{                textField: {                  fullWidth: true,                  error: dateError,                  helperText: dateError ? 'Selecione data e hora' : ' ',                  InputProps: {                    startAdornment: (                      <InputAdornment position="start">                        <CalendarMonthRoundedIcon fontSize="small" />                      </InputAdornment>                    ),                  },                },              }}            />            <TextField              select              label="Status"              value={status}              onChange={(e) => setStatus(e.target.value as Task['status'])}              fullWidth            >              {statusOptions.map((opt) => (                <MenuItem key={opt.value} value={opt.value}>                  <CircleIcon sx={{ fontSize: 10, mr: 1, color: opt.color }} />                  {opt.label}                </MenuItem>              ))}            </TextField>            <TextField              label="Notas (opcional)"              placeholder="Detalhes adicionais da tarefa…"              value={notes}              onChange={(e) => setNotes(e.target.value)}              fullWidth              multiline              minRows={3}              InputProps={{                startAdornment: (                  <InputAdornment position="start">                    <NotesRoundedIcon fontSize="small" />                  </InputAdornment>                ),              }}            />          </Stack>        </DialogContent>        <DialogActions sx={{ px: 3, pb: 2, pt: 1 }}>          {mode === 'edit' && onDelete && initial?.id && (            <Button color="error" onClick={handleDelete}>              Excluir            </Button>          )}          <Stack direction="row" spacing={1} sx={{ ml: 'auto' }}>            <Button onClick={onClose}>Cancelar</Button>            <Button variant="contained" onClick={handleSubmit}>              {mode === 'create' ? 'Cadastrar' : 'Salvar'}            </Button>          </Stack>        </DialogActions>      </Dialog>    </LocalizationProvider>  );}function HeaderIconWrapper({ children }: { children: React.ReactNode }) {  return (    <Stack      sx={{        width: 36,        height: 36,        borderRadius: '50%',        display: 'grid',        placeItems: 'center',        bgcolor: (t) => alpha(t.palette.primary.main, 0.15),        color: 'primary.main',        flexShrink: 0,      }}    >      {children}    </Stack>  );}function parseDate(input: string): dayjs.Dayjs | null {  const re = /(\d{2})\/(\d{2})\/(\d{4})\s+às\s+(\d{2}):(\d{2})/;  const m = input.match(re);  if (!m) return null;  const [_, dd, mm, yyyy, HH, MM] = m;  return dayjs(`${yyyy}-${mm}-${dd}T${HH}:${MM}`);}