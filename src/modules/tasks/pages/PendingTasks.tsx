import * as React from 'react';import {  Box, Stack, Paper, Typography, TextField, InputAdornment,  Button, IconButton, Tooltip, Divider, Chip, Menu, MenuItem, Link} from '@mui/material';import { alpha } from '@mui/material/styles';import SearchRoundedIcon from '@mui/icons-material/SearchRounded';import AddRoundedIcon from '@mui/icons-material/AddRounded';import TuneRoundedIcon from '@mui/icons-material/TuneRounded';import VisibilityRoundedIcon from '@mui/icons-material/VisibilityRounded';import EditRoundedIcon from '@mui/icons-material/EditRounded';import DeleteRoundedIcon from '@mui/icons-material/DeleteRounded';import CalendarMonthRoundedIcon from '@mui/icons-material/CalendarMonthRounded';import CircleIcon from '@mui/icons-material/Circle';import TaskDialog from './../dialog';import { type Task } from './../dialog';const seed: Task[] = [  { id: '1', title: 'Troca de vela - Civic 2009', date: '19/07/2025 às 13:10', status: 'pendente' },  { id: '2', title: 'Amortecedor traseiro - Civic 2009', date: '03/07/2025 às 10:45', status: 'pendente' },  { id: '3', title: 'Revisão geral - Peugeot 208 2014', date: '02/07/2025 às 17:00', status: 'pendente' },  { id: '4', title: 'Orçamento do cabeçote - Astra 2003', date: '19/07/2025 às 13:10', status: 'pendente' },  { id: '5', title: 'Troca de correia dentada - ASX 2015', date: '19/07/2025 às 13:10', status: 'pendente' },];function SoftButton(props: React.ComponentProps<typeof Button>) {  const { sx, ...rest } = props;  return (    <Button      variant="text"      {...rest}      sx={{        borderRadius: 999, px: 1.75, py: 0.75, fontWeight: 600, textTransform: 'none',        bgcolor: (t) => alpha(t.palette.primary.main, 0.08), color: 'primary.main',        '&:hover': { bgcolor: (t) => alpha(t.palette.primary.main, 0.16) },        ...sx,      }}    />  );}function StatusChip({ status = 'pendente' as Task['status'] }) {  const map = {    pendente: { color: 'warning.main', label: 'Pendente' },    concluída: { color: 'success.main', label: 'Concluída' },    atrasada:  { color: 'error.main',   label: 'Atrasada'  },  } as const;  const cfg = map[status || 'pendente'];  return (    <Chip      size="small"      label={        <Stack direction="row" spacing={1} alignItems="center">          <CircleIcon sx={{ fontSize: 8, color: cfg.color }} />          <span>{cfg.label}</span>        </Stack>      }      sx={{        borderRadius: 999,        bgcolor: (t) => alpha(t.palette.text.primary, 0.06),        '& .MuiChip-label': { px: 1 },      }}    />  );}function TaskPill({  task, onView, onEdit, onDelete,}: { task: Task; onView: (t: Task) => void; onEdit: (t: Task) => void; onDelete: (t: Task) => void; }) {  return (    <Paper      elevation={0}      sx={{        px: 2, py: 1.25, borderRadius: 999,        border: (t) => `1px solid ${alpha(t.palette.text.primary, 0.18)}`,        bgcolor: 'background.paper',        transition: 'transform .12s ease, background-color .15s ease, border-color .15s ease',        '&:hover': {          transform: 'translateY(-1px)',          borderColor: (t) => alpha(t.palette.primary.main, 0.35),          bgcolor: (t) => alpha(t.palette.primary.main, 0.03),        },      }}    >      <Stack direction="row" alignItems="center" spacing={2}>        <Typography variant="body2" fontWeight={600} sx={{ flex: 1, minWidth: 0 }} noWrap title={task.title}>          {task.title}        </Typography>        <Stack direction="row" spacing={1.25} alignItems="center" sx={{ minWidth: 220, justifyContent: 'flex-end' }}>          <CalendarMonthRoundedIcon sx={{ fontSize: 18, opacity: 0.65 }} />          <Typography variant="body2" color="text.secondary" noWrap>            {task.date}          </Typography>        </Stack>        <StatusChip status={task.status} />        <Divider orientation="vertical" flexItem sx={{ mx: 1.25, my: 0.5 }} />        <Stack direction="row" spacing={0.5}>          <Tooltip title="Visualizar">            <IconButton size="small" onClick={() => onView(task)}>              <VisibilityRoundedIcon fontSize="small" />            </IconButton>          </Tooltip>          <Tooltip title="Editar">            <IconButton size="small" onClick={() => onEdit(task)}>              <EditRoundedIcon fontSize="small" />            </IconButton>          </Tooltip>          <Tooltip title="Excluir">            <IconButton size="small" onClick={() => onDelete(task)}>              <DeleteRoundedIcon fontSize="small" />            </IconButton>          </Tooltip>        </Stack>      </Stack>    </Paper>  );}function Filters({ onChange }: { onChange: (value: 'todas' | 'pendentes' | 'atrasadas' | 'concluidas') => void }) {  const [anchor, setAnchor] = React.useState<null | HTMLElement>(null);  const open = Boolean(anchor);  return (    <>      <Button variant="outlined" onClick={(e) => setAnchor(e.currentTarget)} startIcon={<TuneRoundedIcon />} sx={{ borderRadius: 999, textTransform: 'none', fontWeight: 600 }}>        Filtros      </Button>      <Menu anchorEl={anchor} open={open} onClose={() => setAnchor(null)}>        <MenuItem onClick={() => { onChange('todas'); setAnchor(null); }}>Todas</MenuItem>        <MenuItem onClick={() => { onChange('pendentes'); setAnchor(null); }}>Pendentes</MenuItem>        <MenuItem onClick={() => { onChange('atrasadas'); setAnchor(null); }}>Atrasadas</MenuItem>        <MenuItem onClick={() => { onChange('concluidas'); setAnchor(null); }}>Concluídas</MenuItem>      </Menu>    </>  );}export default function PendingTasksPage() {  const [tasks, setTasks] = React.useState<Task[]>(seed);  const [q, setQ] = React.useState('');  const [filter, setFilter] = React.useState<'todas' | 'pendentes' | 'atrasadas' | 'concluidas'>('todas');  const [openDialog, setOpenDialog] = React.useState(false);  const [dialogMode, setDialogMode] = React.useState<'create' | 'edit'>('create');  const [current, setCurrent] = React.useState<Task | null>(null);  const handleOpenCreate = () => { setDialogMode('create'); setCurrent(null); setOpenDialog(true); };  const handleOpenEdit = (t: Task) => { setDialogMode('edit'); setCurrent(t); setOpenDialog(true); };  const handleSubmitDialog = (t: Task) => {    if (dialogMode === 'create') {      const withId = { ...t, id: crypto.randomUUID() };      setTasks((p) => [withId, ...p]);    } else {      setTasks((p) => p.map((x) => (x.id === t.id ? { ...x, ...t } : x)));    }  };  const handleDeleteDialog = (t: Task) => setTasks((p) => p.filter((x) => x.id !== t.id));  const filtered = tasks    .filter((t) => t.title.toLowerCase().includes(q.toLowerCase()))    .filter((t) => {      if (filter === 'todas') return true;      if (filter === 'pendentes') return t.status === 'pendente';      if (filter === 'atrasadas') return t.status === 'atrasada';      if (filter === 'concluidas') return t.status === 'concluída';      return true;    });  return (    <Box sx={{ maxWidth: 1600, mx: 'auto', px: { xs: 2, md: 4, lg: 6 }, py: { xs: 2, md: 4 } }}>      <Stack direction="row" alignItems="center" justifyContent="space-between" mb={3} gap={2} flexWrap="wrap">        <Typography variant="h6" fontWeight={700}>Tarefas Pendentes</Typography>        <Stack direction="row" spacing={1.5} alignItems="center" sx={{ width: { xs: '100%', md: 'auto' } }}>          <TextField            value={q}            onChange={(e) => setQ(e.target.value)}            placeholder="Pesquisar tarefas"            size="small"            sx={{              minWidth: { xs: '100%', md: 360 },              '& .MuiOutlinedInput-root': { borderRadius: 999, bgcolor: 'background.paper' },            }}            InputProps={{              startAdornment: (                <InputAdornment position="start">                  <SearchRoundedIcon fontSize="small" />                </InputAdornment>              ),            }}          />          <SoftButton startIcon={<AddRoundedIcon />} onClick={handleOpenCreate}>            Cadastrar Nova Tarefa          </SoftButton>          <Filters onChange={setFilter} />        </Stack>      </Stack>      <Stack spacing={1.25}>        {filtered.length === 0 && (          <Paper variant="outlined" sx={{ borderRadius: 3, p: 4, textAlign: 'center', bgcolor: (t) => alpha(t.palette.primary.main, 0.02) }}>            <Typography fontWeight={600}>Nenhuma tarefa encontrada</Typography>            <Typography variant="body2" color="text.secondary">Ajuste a busca ou crie uma nova tarefa.</Typography>          </Paper>        )}        {filtered.map((t) => (          <TaskPill            key={t.id}            task={t}            onView={(task) => console.log('ver', task)}            onEdit={handleOpenEdit}            onDelete={(task) => setTasks((p) => p.filter((x) => x.id !== task.id))}          />        ))}      </Stack>      <TaskDialog        open={openDialog}        mode={dialogMode}        initial={current}        onClose={() => setOpenDialog(false)}        onSubmit={handleSubmitDialog}        onDelete={dialogMode === 'edit' ? handleDeleteDialog : undefined}      />    </Box>  );}